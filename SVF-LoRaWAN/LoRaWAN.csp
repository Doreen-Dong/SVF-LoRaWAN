#import "PAT.Lib.Queue";
#import "PAT.Lib.Array";
#import "PAT.Lib.LoRaWANclass1";

#define ED 2;
#define NS 1;
#define AS 1;
#define NonceNum 5;
#define MAX_FCNT_GAP 5;
enum{Join_Request,Join_Accept,AesEncrypt,AesDecrypt};
enum{DLSettings,RxDelay,CFList,ConfirmData,Ack,ChangeData};
enum{oldDevNonce,oldAck};
channel ComEN[ED*NS] 0;
channel ComNA[NS*AS] 0;
channel FakeIE[ED] 0;
channel FakeIN[NS] 0;
channel FakeIA[AS] 0;

var DevNonce;
var AppNonce;
var EDFCntUp[ED]=[5,0];
var EDFCntDown[ED]=[0,0];
var NSFCntUp[ED]=[5,0];
var NSFCntDown[ED]=[0,0];
var oldMIC1[4];
var MIC1[4];
var MIC1_1[4];
var array[4]=[1,2,3,4];
var MIC2[4];
var MIC2_1[4];
var MIC3[4];
var MIC3_1[4];
var MIC4[4];
var MIC4_1[4];
var FakeMIC3[4];
var check_MIC1 = true;
var check_MIC2 = true;
var check_MIC3 = true;
var check_MIC4 = true;
var check_DevNonce = true; 
var check_sessionKey = true;
var availability = false;
var check_FCnt = true;
var join_success = false;
var confidentiality = true; 
var successreplayattack = false;
var successdosattack = false;
var successbitflipattack = false;
var successackspoofattack =false;
var successmitmattack = false;
var<Queue> NonceList;
var AppsKey[16];
var NwksKey[16];
var AppsKey_NS[16];
var NwksKey_NS[16];
var AppEUI[AS] = [1];
var DevEUI[ED] = [1,2];
var NetID[NS] = [1];
var DevAddr[ED] = [3,4];
var AppKey[ED]=[0,1];
var cond1;
var cond2;
var cond3;
var cond4;
var a=5;
var b=5;
var c=5;

/*Model Join Procedure*/
//Model end-device during Join Procedure
ED_Join(i,j,k,InturderCond) = GenerateDevNonce{DevNonce=call(RAND,20,0,5);}
                -> Compute_mic1{MIC1=call(Aes128_cmac,AppKey[i],[AppEUI[k],DevEUI[i],DevNonce],3)}
                -> if (InturderCond) {ED_Join_fake(i,j,k,DevNonce,MIC1)} else {ED_Join_com(i,j,k,DevNonce,MIC1)};
                
ED_Join_com(i,j,k,devnonce,mic1) = ComEN[j+i*NS]!Join_Request.AppEUI[k].DevEUI[i].DevNonce.mic1 -> (ED_Join_com_2(i,j,DevNonce)[*] Skip);
ED_Join_fake(i,j,k,devnonce,mic1) = FakeIE[i]!Join_Request.AppEUI[k].DevEUI[i].DevNonce.mic1 -> (ED_Join_fake_2(i,j,DevNonce)[*] Skip); 
             
ED_Join_com_2(i,j,devnonce) = ComEN[j+i*NS]?Join_Accept.AesDecrypt.appnonce.netid.devaddr.dlsettings.rxdelay.cflist.mic2 
                            -> ED_Join_3(i,j,devnonce,appnonce,netid,devaddr,dlsettings,rxdelay,cflist,mic2);                            
ED_Join_fake_2(i,j,devnonce)= FakeIE[i]?Join_Accept.AesDecrypt.appnonce.netid.devaddr.dlsettings.rxdelay.cflist.mic2 
                           -> ED_Join_3(i,j,devnonce,appnonce,netid,devaddr,dlsettings,rxdelay,cflist,mic2);
                        
ED_Join_3(i,j,devnonce,appnonce,netid,devaddr,dlsettings,rxdelay,cflist,mic2) = 
                                Compute_mic2_1{MIC2_1=call(Aes128_cmac,AppKey[i],[appnonce,netid,devaddr,dlsettings,rxdelay,cflist],6);}
                             -> Check_mic2{check_MIC2=call(CheckMIC,mic2,MIC2_1);}
                             -> if(check_MIC2==true){Compute_SessionKey{join_success=true;AppsKey=call(ComputeSessionKey,AppKey[i],appnonce,netid,devnonce,2);
                                                             NwksKey=call(ComputeSessionKey,AppKey[i],appnonce,netid,devnonce,1)}->Skip}
                                else{Skip};

//Model network server during Join Procedure
NS_Join(i,j,k,InturderCond) = if (InturderCond) {NS_Join_fake(i,j,k)} else {NS_Join_com(i,j,k)};
NS_Join_com(i,j,k) = ComEN[j+i*NS]?Join_Request.appeui.deveui.devnonce.mic1
                   -> Check_DevNonce{check_DevNonce=!NonceList.Contains(devnonce);}
                   -> if(check_DevNonce==true){Compute_mic1_1{MIC1_1=call(Aes128_cmac,AppKey[i],[appeui,deveui,devnonce],3);} 
                                               -> Check_mic1{check_MIC1=call(CheckMIC,mic1,MIC1_1);} 
                                                -> if(check_MIC1==true){RecordDevNonce{if(NonceList.Count()==NonceNum){NonceList.Dequeue();NonceList.Enqueue(devnonce)}
                                                                                       else{NonceList.Enqueue(devnonce)};} 
                                                                        -> NS_Join_com_2(i,j,k,devnonce)}
                                                   else{Skip}}
                     else{Skip};
NS_Join_fake(i,j,k) = FakeIN[j]?Join_Request.appeui.deveui.devnonce.mic1
                    -> Check_DevNonce{check_DevNonce=!NonceList.Contains(devnonce);}
                    -> if(check_DevNonce==true){Compute_mic1_1{MIC1_1=call(Aes128_cmac,AppKey[i],[appeui,deveui,devnonce],3);} 
                                               -> Check_mic1{check_MIC1=call(CheckMIC,mic1,MIC1_1);} 
                                                -> if(check_MIC1==true){RecordDevNonce{if(NonceList.Count()==NonceNum){NonceList.Dequeue();NonceList.Enqueue(devnonce)}
                                                                                       else{NonceList.Enqueue(devnonce)};} 
                                                                        -> NS_Join_fake_2(i,j,k,devnonce)}
                                                   else{Skip}}
                      else{Skip};
                     
NS_Join_com_2(i,j,k,devnonce) = GenerateAppNonce{AppNonce=call(RAND,20,0,5);}
                 -> Compute_mic2{MIC2=call(Aes128_cmac,AppKey[i],[AppNonce,NetID[j],DevAddr[i],DLSettings,RxDelay,CFList],6);}
                 -> ComEN[j+i*NS]!Join_Accept.AesDecrypt.AppNonce.NetID[j].DevAddr[i].DLSettings.RxDelay.CFList.MIC2
                 -> Compute_SessionKey{AppsKey_NS=call(ComputeSessionKey,AppKey[i],AppNonce,NetID[j],devnonce,2);
                                       NwksKey_NS=call(ComputeSessionKey,AppKey[i],AppNonce,NetID[j],devnonce,1);}
                 -> ComNA[k+j*AS]!AppsKey_NS
                 -> Skip;
NS_Join_fake_2(i,j,k,devnonce) = GenerateAppNonce{AppNonce=call(RAND,20,0,5);}
                 -> Compute_mic2{MIC2=call(Aes128_cmac,AppKey[i],[AppNonce,NetID[j],DevAddr[i],DLSettings,RxDelay,CFList],6);}
                 -> FakeIN[j]!Join_Accept.AesDecrypt.AppNonce.NetID[j].DevAddr[i].DLSettings.RxDelay.CFList.MIC2
                 -> Compute_SessionKey{AppsKey_NS=call(ComputeSessionKey,AppKey[i],AppNonce,NetID[j],devnonce,2);
                                       NwksKey_NS=call(ComputeSessionKey,AppKey[i],AppNonce,NetID[j],devnonce,1);}
                 -> ComNA[k+j*AS]!AppsKey_NS
                 -> Skip;                 

//Model application server during Join Procedure             
AS_Join(i,j,k) = (ComNA[k+j*AS]?appskey -> Skip)[](FakeIA[k]?appskey -> Skip)[*]Skip;

/*Session Phase*/
Initial(i,j) = InitialCnt{EDFCntUp[i]=0; EDFCntDown[i]=0; NSFCntUp[i]=0; NSFCntDown[i]=0;} -> Skip;

//Model end-device during Session Phase
//ED_Session_1(i,j,k) = if(a<=5){ED_Session(i,j,k)}else{Stop};               
ED_Session(i,j,k,InturderCond1) = Compute_mic3{EDFCntUp[i]++; MIC3=call(Aes128_cmac2,NwksKey,[ConfirmData,EDFCntUp[i]],2)}
                                -> if (InturderCond1) {ED_Session_fake(i,j,k)} else {ED_Session_com(i,j,k)};
ED_Session_com(i,j,k) =  ComEN[j+i*NS]!AesEncrypt.AppsKey.ConfirmData.EDFCntUp[i].MIC3 -> (ED_Session_com_2(i,j,k)[*] Skip);
ED_Session_fake(i,j,k) = FakeIE[i]!AesEncrypt.AppsKey.ConfirmData.EDFCntUp[i].MIC3 -> (ED_Session_fake_2(i,j,k)[*] Skip);
                  
ED_Session_com_2(i,j,k) = ComEN[j+i*NS]?AesDecrypt.appskey.ack.nsfcntdown.mic4 -> ED_Session_com_3(i,j,k,ack,nsfcntdown,mic4);
ED_Session_fake_2(i,j,k) = FakeIE[i]?AesDecrypt.appskey.ack.nsfcntdown.mic4 -> ED_Session_fake_3(i,j,k,ack,nsfcntdown,mic4);

ED_Session_com_3(i,j,k,ack,nsfcntdown,mic4) = CheckFcnt{if(nsfcntdown-EDFCntDown[i]<=MAX_FCNT_GAP){check_FCnt=true}else{check_FCnt=false};}
					                    -> if(check_FCnt==true){Compute_mic4_1{EDFCntDown[i]=nsfcntdown; MIC4_1=call(Aes128_cmac2,NwksKey,[ack,nsfcntdown],2)}
					                                         -> Check_mic4{check_MIC4=call(CheckMIC,mic4,MIC4_1);availability=check_MIC4}
					                                         -> Skip}
					                       else{Skip};
ED_Session_fake_3(i,j,k,ack,nsfcntdown,mic4) = CheckFcnt{if(nsfcntdown-EDFCntDown[i]<=MAX_FCNT_GAP){check_FCnt=true}else{check_FCnt=false};}
					                    -> if(check_FCnt==true){Compute_mic4_1{EDFCntDown[i]=nsfcntdown; MIC4_1=call(Aes128_cmac2,NwksKey,[ack,nsfcntdown],2)}
					                                         -> Check_mic4{check_MIC4=call(CheckMIC,mic4,MIC4_1);availability=false}
					                                         -> Skip}
					                       else{Skip};					                       
                     
//Model Network Server during Session Phase
//NS_Session_1(i,j,k) = if(b<=5){NS_Session(i,j,k)}else{Stop};                   
NS_Session(i,j,k,InturderCond1,InturderCond2) = if (InturderCond1) {NS_Session_fake(i,j,k,InturderCond1,InturderCond2)} else {NS_Session_com(i,j,k,InturderCond1,InturderCond2)};
NS_Session_com(i,j,k,InturderCond1,InturderCond2) = ComEN[j+i*NS]?AesEncrypt.appskey.confirmdata.edfntup.mic3 -> NS_Session_2(i,j,k,appskey,confirmdata,edfntup,mic3,InturderCond1,InturderCond2);
NS_Session_fake(i,j,k,InturderCond1,InturderCond2) = FakeIN[j]?AesEncrypt.appskey.confirmdata.edfntup.mic3 -> NS_Session_2(i,j,k,appskey,confirmdata,edfntup,mic3,InturderCond1,InturderCond2);
                  
NS_Session_2(i,j,k,appskey,confirmdata,edfntup,mic3,InturderCond1,InturderCond2) = CheckSession{check_sessionKey=call(CheckSessionKey,appskey,AppsKey_NS);}
								                    -> CheckFcnt{if(edfntup-NSFCntUp[i]<=MAX_FCNT_GAP){check_FCnt=true}else{check_FCnt=false};}
								                    -> if(check_sessionKey==true&&check_FCnt==true){Compute_mic3_1{NSFCntUp[i]=edfntup; MIC3_1=call(Aes128_cmac2,NwksKey,[confirmdata,edfntup],2)}
								                                         -> Check_mic3{check_MIC3=call(CheckMIC,mic3,MIC3_1);}
								                                         -> if(check_MIC3==true){(if(InturderCond2) {NS_Session_fake_2(i,j,k,confirmdata,edfntup,InturderCond1)} 
								                                                                  else {NS_Session_com_2(i,j,k,confirmdata,edfntup,InturderCond1)})}
								                                            else{Skip}}
								                       else{Skip};
NS_Session_com_2(i,j,k,confirmdata,edfntup,InturderCond1) = ComNA[k+j*AS]!AesEncrypt.AppsKey.confirmdata.edfntup 
                                            -> ComNA[k+j*AS]?AesDecrypt.appskey.ack
                                            -> Compute_mic4{NSFCntDown[i]++; MIC4=call(Aes128_cmac2,NwksKey,[ack,NSFCntDown[i]],2)}
                                            -> if (InturderCond1) {NS_Session_fake2_2(i,j,k,MIC4)} else {NS_Session_com2_2(i,j,k,MIC4)};
NS_Session_fake_2(i,j,k,confirmdata,edfntup,InturderCond1) = FakeIN[j]!AesEncrypt.AppsKey.confirmdata.edfntup 
                                                           -> FakeIN[j]?AesDecrypt.appskey.ack
                                                           -> Compute_mic4{NSFCntDown[i]++; MIC4=call(Aes128_cmac2,NwksKey,[ack,NSFCntDown[i]],2)}
                                                           -> if(InturderCond1) {NS_Session_fake2_2(i,j,k,MIC4)} else {NS_Session_com2_2(i,j,k,MIC4)};

NS_Session_com2_2(i,j,k,mic4) = ComEN[j+i*NS]!AesDecrypt.AppsKey.Ack.NSFCntDown[i].mic4 -> Skip;
NS_Session_fake2_2(i,j,k,mic4) = FakeIN[j]!AesDecrypt.AppsKey.Ack.NSFCntDown[i].mic4 -> Skip;
//NS_Session_3(i,j,k) = ComNA[k+j*AS]?AesDecrypt.appskey.ack -> NS_Session_4(i,j,k,ack)
//                    [] FakeIN[j]?AesDecrypt.appskey.ack -> NS_Session_4(i,j,k,ack);
//                    
//NS_Session_4(i,j,k,ack) = Compute_mic4{NSFCntDown[i]++; MIC4=call(Aes128_cmac2,NwksKey,[ack,NSFCntDown[i]],2)}
//                        -> (ComEN[j+i*NS]!AesDecrypt.AppsKey.ack.NSFCntDown[i].MIC4 -> Skip
//                           [] FakeIN[j]!AesDecrypt.AppsKey.ack.NSFCntDown[i].MIC4 -> Skip);
                           
//Model Application Server during Session Phase                    
//AS_Session_1(i,j,k) = if(c<=5){AS_Session(i,j,k)}else{Stop};
AS_Session(i,j,k,InturderCond2)= if (InturderCond2) {AS_Session_3(i,j,k) [*] Skip} else {AS_Session_2(i,j,k) [*] Skip};                 
AS_Session_2(i,j,k) = ComNA[k+j*AS]?AesEncrypt.appskey.confirmdata.edfntup
                    -> ComNA[k+j*AS]!AesDecrypt.AppsKey_NS.Ack
                    -> Skip;
                    
AS_Session_3(i,j,k) = FakeIA[k]?AesEncrypt.appskey.confirmdata.edfntup
                    -> FakeIA[k]!AesDecrypt.AppsKey_NS.Ack
                    -> Skip;

/*Intruder Modeling*/
//Replay attacks
Replay_JoinRequest(i,j) = FakeIE[i]?Join_Request.appeui.deveui.devnonce.mic1
                        ->{oldMIC1=call(Aes128_cmac,AppKey[i],[appeui,deveui,oldDevNonce],3)}
                        ->FakeIN[j]!Join_Request.appeui.deveui.oldDevNonce.oldMIC1
                        ->(Replay_JoinAccept(i,j)[*]Skip);
                        
Replay_JoinRequest_sub(i,j) = FakeIN[j]?Join_Accept.AesDecrypt.appnonce.netid.devaddr.dlsettings.rxdelay.cflist.mic2
                            -> CheckReplayAttack{successreplayattack=true;} -> Skip;

Replay_JoinAccept(i,j) = FakeIN[j]?Join_Accept.AesDecrypt.appnonce.netid.devaddr.dlsettings.rxdelay.cflist.mic2
                       -> FakeIE[i]!Join_Accept.AesDecrypt.appnonce.netid.devaddr.dlsettings.rxdelay.cflist.mic2
                       -> CheckReplayAttack{successreplayattack=true;} 
                       -> Skip;

Intruder_ReplayAttack_Join(i,j) = Replay_JoinRequest(i,j);
                       
Replay_Session(i,j) = FakeIE[i]?AesEncrypt.appskey.confirmdata.edfntup.mic3
                    -> FakeIN[j]!AesEncrypt.appskey.confirmdata.edfntup.mic3
                    -> (Replay_Session_sub(i,j)[*]Skip);
                    
Replay_Session_sub(i,j) = FakeIN[j]?AesDecrypt.appskey.ack.nsfcntdown.mic4
                        -> CheckReplayAttack{successreplayattack=true;} -> Skip;

Intruder_ReplayAttack_Session(i,j) = Replay_Session(i,j);                        

//Dos attacks
Intruder_DosAttack(i,j) = FakeIE[i]?Join_Request.appeui.deveui.devnonce.mic1
                        -> FakeIN[j]!Join_Request.appeui.deveui.devnonce.mic1
                        -> (Intruder_DosAttack_sub(i,j)[*]Skip);

Intruder_DosAttack_sub(i,j) = FakeIN[j]?Join_Accept.AesDecrypt.appnonce.netid.devaddr.dlsettings.rxdelay.cflist.mic2
                           -> FakeIE[i]!Join_Accept.AesDecrypt.appnonce.netid.devaddr.dlsettings.rxdelay.cflist.mic2
                           -> CheckDoSAttack{successdosattack=true;availability=false} 
                           -> Skip;
//Bit Flipping attacks
Intruder_BitFlippingAttack(j,k) = FakeIN[j]?AesEncrypt.appskey.confirmdata.edfntup
                                -> BitFlip
                                -> FakeIA[k]!AesEncrypt.appskey.ChangeData.edfntup
                                -> (Intruder_BitFlippingAttack_sub(j,k)[*]Skip);
                                
Intruder_BitFlippingAttack_sub(j,k) = FakeIA[k]?AesDecrypt.appskey.ack
                                    ->FakeIN[j]!AesDecrypt.appskey.ack
                                    -> CheckBitFlippingAttack{successbitflipattack=true;check_MIC4=false} -> Skip;
                                    
//Ack Spoofing attacks
Intruder_AckSpoofingAttack(i,j) = FakeIE[i]?AesEncrypt.appsKey.confirmData.edfcntuo.mic3
                                -> FakeIN[j]!AesEncrypt.appsKey.confirmData.edfcntuo.mic3
                                ->(Intruder_AckSpoofingAttack_sub(i,j)[*]Skip);
                                 
Intruder_AckSpoofingAttack_sub(i,j) = FakeIN[j]?AesDecrypt.appskey.ack.nsfcntdown.mic4
                                   -> FakeIE[i]!AesDecrypt.appskey.oldAck.nsfcntdown.mic4
                                   -> CheckAckSpoofingAttack{successackspoofattack=true;} 
                                   -> Skip;
//ManInTheMiddle attacks
Intruder_MITMAttack(i,j) = FakeIE[i]?AesEncrypt.appskey.confirmdata.edfntup.mic3
                         -> CribDragging{confidentiality=false;}
                         -> Compute_Fakemic3{FakeMIC3=call(Aes128_cmac2,NwksKey,[ChangeData,edfntup],2)}
                         -> FakeIN[j]!AesEncrypt.appskey.ChangeData.edfntup.FakeMIC3
                         -> (Intruder_MITMAttack_sub(i,j)[*] Skip);
Intruder_MITMAttack_sub(i,j) = FakeIN[j]?AesDecrypt.appskey.ack.nsfcntdown.mic4
                             ->FakeIE[i]!AesDecrypt.appskey.ack.nsfcntdown.mic4
                             -> CheckMITMAttack{successmitmattack=true;check_MIC4=false}
                             -> Skip;
                         
LoRaWan_Join(i,j,k,InturderCond) = ED_Join(i,j,k,InturderCond) || NS_Join(i,j,k,InturderCond) || AS_Join(i,j,k);
LoRaWan_Session_2(i,j,k,InturderCond1,InturderCond2) = ED_Session(i,j,k,InturderCond1) || NS_Session(i,j,k,InturderCond1,InturderCond2) || AS_Session(i,j,k,InturderCond2);
LoRaWan_Session(i,j,k,InturderCond1,InturderCond2)=LoRaWan_Session_2(i,j,k,InturderCond1,InturderCond2);

LoRaWan_Standard() = |||i:{0..1-1}; j:{0..NS-1}; k:{0..AS-1}@(LoRaWan_Join(i,j,k,false);if(join_success==true){LoRaWan_Session(i,j,k,false,false)}else{Skip});

LoRaWan_Standard_ReplayAttack() = ((LoRaWan_Join(ED-2,NS-1,AS-1,true) || Intruder_ReplayAttack_Join(ED-2,NS-1));if(join_success==true){LoRaWan_Session(ED-2,NS-1,AS-1,false,false)}else{Skip});
LoRaWan_Standard_DosAttack() = ((LoRaWan_Join(ED-2,NS-1,AS-1,true) || Intruder_DosAttack(ED-2,NS-1));if(join_success==true){LoRaWan_Session(ED-2,NS-1,AS-1,false,false)}else{Skip});
LoRaWan_Standard_BitFlippingAttack() = (LoRaWan_Join(ED-2,NS-1,AS-1,false);if(join_success==true){LoRaWan_Session(ED-2,NS-1,AS-1,false,true)||Intruder_BitFlippingAttack(NS-1,AS-1)}else{Skip});
LoRaWan_Standard_AckSpoofingAttack() = (LoRaWan_Join(ED-2,NS-1,AS-1,false);if(join_success==true){LoRaWan_Session(ED-2,NS-1,AS-1,true,false)||Intruder_AckSpoofingAttack(NS-1,AS-1)}else{Skip});
LoRaWan_Standard_MITMAttack() = (LoRaWan_Join(ED-2,NS-1,AS-1,false);if(join_success==true){LoRaWan_Session(ED-2,NS-1,AS-1,true,false)||Intruder_MITMAttack(NS-1,AS-1)}else{Skip});
//LoRaWan_Standard() =LoRaWan_Join(ED-1,NS-1,AS-1);

/*fundamental properties*/
#define Integrity(check_MIC1==true && check_MIC2==true && check_MIC3==true && check_MIC4==true);
#define SessionKey_Consistency(check_sessionKey==true);
#define Availability(availability==true);
#define Confidentiality(confidentiality==true);

/*security properties*/
#define SuccessRelayAttack (successreplayattack==true);
#define SuccessAckSpoofingAttack (successackspoofattack==true);
#define SuccessDoSAttack (successdosattack==true);
#define SuccessBitFlippingAttack (successbitflipattack==true);
#define SuccessMITMAttack (successmitmattack==true);
//standard LoraWAN
#assert LoRaWan_Standard() deadlockfree;
#assert LoRaWan_Standard() divergencefree;
#assert LoRaWan_Standard() |= []Integrity;
#assert LoRaWan_Standard() |= []SessionKey_Consistency;
#assert LoRaWan_Standard() |= []<>Availability;
#assert LoRaWan_Standard() |= []Confidentiality;
//with Replay Attacks
#assert LoRaWan_Standard_ReplayAttack() deadlockfree;
#assert LoRaWan_Standard_ReplayAttack() reaches SuccessRelayAttack;
#assert LoRaWan_Standard_ReplayAttack() |= []!SuccessRelayAttack;
#assert LoRaWan_Standard_ReplayAttack() |= []Integrity;
#assert LoRaWan_Standard_ReplayAttack() |= []SessionKey_Consistency;
#assert LoRaWan_Standard_ReplayAttack() |= []<>Availability;
#assert LoRaWan_Standard_ReplayAttack() |= []Confidentiality;
//with Dos Attacks
#assert LoRaWan_Standard_DosAttack() deadlockfree;
#assert LoRaWan_Standard_DosAttack() reaches SuccessDoSAttack;
#assert LoRaWan_Standard_DosAttack() |= []!SuccessDoSAttack;
#assert LoRaWan_Standard_DosAttack() |= []Integrity;
#assert LoRaWan_Standard_DosAttack() |= []SessionKey_Consistency;
#assert LoRaWan_Standard_DosAttack() |= []<>Availability;
#assert LoRaWan_Standard_DosAttack() |= []Confidentiality;
//with Bit Flipping Attacks
#assert LoRaWan_Standard_BitFlippingAttack() deadlockfree;
#assert LoRaWan_Standard_BitFlippingAttack() reaches SuccessBitFlippingAttack;
#assert LoRaWan_Standard_BitFlippingAttack() |= []!SuccessBitFlippingAttack;
#assert LoRaWan_Standard_BitFlippingAttack() |= []Integrity;
#assert LoRaWan_Standard_BitFlippingAttack() |= []SessionKey_Consistency;
#assert LoRaWan_Standard_BitFlippingAttack() |= []<>Availability;
#assert LoRaWan_Standard_BitFlippingAttack() |= []Confidentiality;
//with Ack Spoofing Attacks
#assert LoRaWan_Standard_AckSpoofingAttack() deadlockfree;
#assert LoRaWan_Standard_AckSpoofingAttack() reaches SuccessAckSpoofingAttack;
#assert LoRaWan_Standard_AckSpoofingAttack() |= []!SuccessAckSpoofingAttack;
#assert LoRaWan_Standard_AckSpoofingAttack() |= []Integrity;
#assert LoRaWan_Standard_AckSpoofingAttack() |= []SessionKey_Consistency;
#assert LoRaWan_Standard_AckSpoofingAttack() |= []<>Availability;
#assert LoRaWan_Standard_AckSpoofingAttack() |= []Confidentiality;
//with Man-In-The-Middle Attacks
#assert LoRaWan_Standard_MITMAttack() deadlockfree;
#assert LoRaWan_Standard_MITMAttack() reaches SuccessMITMAttack;
#assert LoRaWan_Standard_MITMAttack() |= []!SuccessMITMAttack;
#assert LoRaWan_Standard_MITMAttack() |= []Integrity;
#assert LoRaWan_Standard_MITMAttack() |= []SessionKey_Consistency;
#assert LoRaWan_Standard_MITMAttack() |= []<>Availability;
#assert LoRaWan_Standard_MITMAttack() |= []Confidentiality;
                     